// Prisma Schema for EthVaultPQ Vesting Platform
// Database: Neon PostgreSQL (serverless)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?   // Hashed with bcrypt

  // Multi-factor auth
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?

  // Passkeys / WebAuthn (RIP-7212)
  passkeys      Passkey[]

  // Role-based access control
  role          Role      @default(END_USER)

  // Organization membership
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Wallet connection (optional)
  walletAddress String?   @unique

  // Account status
  isActive      Boolean   @default(true)
  isSuspended   Boolean   @default(false)
  suspendedAt   DateTime?
  suspendedBy   String?
  suspensionReason String?

  // Audit fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
  grantsBeneficiary VestingGrant[] @relation("GrantBeneficiary")
  grantsCreated VestingGrant[] @relation("GrantCreator")
  impersonations Impersonation[] @relation("ImpersonationActor")
  impersonated  Impersonation[] @relation("ImpersonationTarget")

  @@index([email])
  @@index([organizationId])
  @@index([walletAddress])
  @@map("users")
}

// Enum for user roles (RBAC)
enum Role {
  ORG_ADMIN           // Full org control
  HR_MANAGER          // Grant creation/management
  FINANCE_OPS         // Treasury & payouts
  SUPPORT_AGENT       // Help desk access
  END_USER            // Beneficiary (default)
  AUDITOR             // Read-only access
  SUPER_ADMIN         // Platform admin (internal)
}

// Passkey/WebAuthn credentials
model Passkey {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  credentialId    String   @unique // WebAuthn credential ID
  publicKey       String   // COSE public key
  counter         BigInt   // Signature counter
  transports      String?  // JSON: ["usb", "nfc", "ble", "internal"]

  deviceName      String?  // "iPhone 15 Pro"
  createdAt       DateTime @default(now())
  lastUsedAt      DateTime?

  @@index([userId])
  @@map("passkeys")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth Verification Token
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// ORGANIZATION MANAGEMENT
// ============================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // URL-friendly
  logo        String?
  website     String?

  // Settings (JSON string for SQLite)
  settings    String   @default("{}")

  // Compliance
  clarityActEnabled Boolean @default(false)
  defaultHoldPeriodDays Int @default(180)
  defaultTradingLimitBps Int @default(100) // 1% per quarter

  // Status
  isActive    Boolean  @default(true)

  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  grants      VestingGrant[]
  policies    CompliancePolicy[]
  treasuries  Treasury[]

  @@map("organizations")
}

// ============================================
// VESTING GRANTS
// ============================================

model VestingGrant {
  id          String   @id @default(cuid())

  // Ownership
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  beneficiaryId String
  beneficiary   User     @relation("GrantBeneficiary", fields: [beneficiaryId], references: [id])

  createdById   String
  createdBy     User     @relation("GrantCreator", fields: [createdById], references: [id])

  // Grant details
  tokenSymbol   String   // "MUSDC", "PYUSD", "ETH"
  tokenAddress  String   // ERC-20 contract address
  tokenDecimals Int      @default(18)

  totalAmount   String   // BigNumber string (wei)
  vestedAmount  String   @default("0")
  claimedAmount String   @default("0")

  // Vesting schedule
  startDate     DateTime
  cliffMonths   Int      @default(0)
  vestingMonths Int

  // On-chain reference
  vaultAddress  String?  // ERC-4626 vault
  txHash        String?  // Deployment tx
  chainId       Int      @default(1)

  // Status
  status        GrantStatus @default(ACTIVE)
  isPaused      Boolean  @default(false)
  pausedAt      DateTime?
  pausedBy      String?

  isRevoked     Boolean  @default(false)
  revokedAt     DateTime?
  revokedBy     String?
  revokeReason  String?

  // Compliance
  postVestingHoldDays Int @default(180) // Clarity Act
  tradingLimitBps     Int @default(100) // 1% per quarter

  // Legal
  agreementHash String?  // IPFS hash or SHA-256
  agreementSignedAt DateTime?

  // Audit
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tranches      VestingTranche[]
  claims        Claim[]

  @@index([organizationId])
  @@index([beneficiaryId])
  @@index([status])
  @@map("vesting_grants")
}

enum GrantStatus {
  DRAFT       // Not yet started
  ACTIVE      // Currently vesting
  PAUSED      // Temporarily suspended
  COMPLETED   // Fully vested
  REVOKED     // Terminated early
}

// Vesting tranches (for milestone-based vesting)
model VestingTranche {
  id        String   @id @default(cuid())
  grantId   String
  grant     VestingGrant @relation(fields: [grantId], references: [id], onDelete: Cascade)

  trancheNumber Int    // 1, 2, 3...
  unlockDate    DateTime
  amount        String // BigNumber string

  isUnlocked    Boolean @default(false)
  unlockedAt    DateTime?

  isClaimed     Boolean @default(false)
  claimedAt     DateTime?

  @@index([grantId])
  @@map("vesting_tranches")
}

// Claim events
model Claim {
  id        String   @id @default(cuid())
  grantId   String
  grant     VestingGrant @relation(fields: [grantId], references: [id])

  amount    String   // BigNumber string
  txHash    String?  // On-chain claim tx

  status    ClaimStatus @default(PENDING)

  // Payout method
  payoutMethod String? // "on_chain", "paypal", "bank_transfer"
  payoutDetails Json?  // Encrypted recipient info

  createdAt DateTime @default(now())
  processedAt DateTime?
  failedAt    DateTime?
  failureReason String?

  @@index([grantId])
  @@index([status])
  @@map("claims")
}

enum ClaimStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// ============================================
// COMPLIANCE & CLARITY ACT
// ============================================

model CompliancePolicy {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  name           String
  description    String?

  // Policy rules (JSON)
  rules          Json     // Dynamic compliance rules

  // Applicability (JSON array of roles)
  appliesToRoles String?  // JSON: ["ORG_ADMIN", "HR_MANAGER"]

  isActive       Boolean  @default(true)
  version        Int      @default(1)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId])
  @@map("compliance_policies")
}

// Trading blackout periods
model BlackoutPeriod {
  id             String   @id @default(cuid())
  organizationId String

  name           String   // "Q4 Earnings"
  startDate      DateTime
  endDate        DateTime

  reason         String?

  isActive       Boolean  @default(true)

  @@map("blackout_periods")
}

// ============================================
// TREASURY & FINANCE
// ============================================

model Treasury {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  name           String   // "Main Treasury"

  // Multi-sig config
  multisigAddress String?
  requiredSignatures Int @default(2)
  signers        String?  // JSON: ["0x123...", "0x456..."]

  // Balances (JSON by token)
  balances       Json     @default("{}")

  // Status
  isActive       Boolean  @default(true)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId])
  @@map("treasuries")
}

// ============================================
// AUDIT & LOGGING
// ============================================

model AuditLog {
  id        String   @id @default(cuid())

  // Who
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  actorRole Role?
  actorIp   String?

  // What
  action    String   // "grant.created", "claim.paid", "trade.blocked"
  resource  String?  // "VestingGrant:abc123"

  // Details
  metadata  Json?    // Full event data

  // Hash chain (tamper-evidence)
  previousHash String?
  eventHash    String // SHA-256 of (previousHash + metadata)

  // When
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

// Impersonation tracking (for support)
model Impersonation {
  id          String   @id @default(cuid())

  actorId     String
  actor       User     @relation("ImpersonationActor", fields: [actorId], references: [id])

  targetId    String
  target      User     @relation("ImpersonationTarget", fields: [targetId], references: [id])

  reason      String   // "Support ticket #1234"

  // Approval (dual approval for sensitive actions)
  isApproved  Boolean  @default(false)
  approvedBy  String?
  approvedAt  DateTime?

  // Session
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  ttlMinutes  Int      @default(60)

  // Permissions
  isReadOnly  Boolean  @default(true) // Default read-only

  @@index([actorId])
  @@index([targetId])
  @@map("impersonations")
}

// ============================================
// NOTIFICATIONS & MESSAGING
// ============================================

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String   @unique

  emailEnabled  Boolean @default(true)
  smsEnabled    Boolean @default(false)
  voiceEnabled  Boolean @default(false) // SignalWire AI

  // Event subscriptions
  grantCreated  Boolean @default(true)
  trancheVested Boolean @default(true)
  claimProcessed Boolean @default(true)
  complianceAlert Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notification_preferences")
}
